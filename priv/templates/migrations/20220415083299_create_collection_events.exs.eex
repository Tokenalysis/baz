defmodule <%= module_prefix %>.Repo.Migrations.CreateCollectionEvents do
  use Ecto.Migration

  def up do
    create_query = """
    CREATE TYPE event_type AS ENUM (
      'item_listed',
      'item_sold',
      'item_transferred',
      'item_metadata_update',
      'item_canceled',
      'item_received_offer',
      'item_received_bid',
      'created',
      'successful',
      'collection_offer',
      'trait_offer',
      'bid_entered',
      'cancelled',
      'transfer'
    )
    """
    execute(create_query)

    create table(:collection_events, primary_key: false) do
      add :event_timestamp, :utc_datetime_usec, null: false
      add :event_type, :event_type, null: false
      add :venue, :text, null: false
      add :slug, :text, null: false
      add :id, :text, null: false   # TODO: maybe nullable for other venues
      add :token_id, :integer

      timestamps()
    end

    create index(:collection_events, [:venue, :slug, :event_type, :id, :token_id, :event_timestamp], unique: true)

    <%= if not is_nil(migration_prefix), do: "execute \"SET search_path to public;\""  %>
    execute "SELECT create_hypertable('<%=if not is_nil(migration_prefix), do: "#{migration_prefix}."%>collection_events', 'event_timestamp');"
    <%= if not is_nil(migration_prefix), do: "execute \"SET search_path to #{migration_prefix};\""  %>
  end

  def down do
    drop table(:collection_events)
    execute("DROP TYPE event_type")
  end
end
